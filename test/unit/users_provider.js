var should = require("should");
var usersProvider = require("../../lib/providers/users_provider");

var testUtils = require("../../lib/test_utils.js");

var testUtil = new testUtils(); 
testUtil.setupTestEnvironment();

var usersProv = new usersProvider();

describe("usersProvider", function()
{
	it("object", function(done)
	{
		should.notEqual(usersProv, null);
		done();
	});


	it("when an empty email parameter is passed to createByEmail", function(done)
	{
		usersProv.createByEmail(null, {}, function(error, result)
		{
			error.should.equal("email parameter must be provided");
			done();		
		});
	});


	it("when an invalid email parameter is passed to createByEmail", function(done)
	{
		usersProv.createByEmail("a@", {}, function(error, result)
		{
			error.should.equal("email parameter is not a valid email");
			done();		
		});
	});


	it("when an empty password parameter is passed to createByEmail", function(done)
	{
		usersProv.createByEmail("asdfa@ascas.com", {}, function(error, result)
		{
			error.should.equal("password parameter must be provided");
			done();		
		});
	});



	it("when an empty facebookAccessToken parameter is passed to createByFacebook", function(done)
	{
		usersProv.createByFacebook(null, function(error, result)
		{
			error.should.equal("facebookAccessToken parameter must be provided");
			done();		
		});

	});


	it("when an empty password parameter is passed to createHashedPassword", function(done)
	{
		should.throws( function() { usersProv.createHashedPassword(null); }, Error);
		done();

	});


	it("when an empty id parameter is passed to verifyByIdPasswordValid", function(done)
	{
		usersProv.verifyByIdPasswordValid(null, null, function(error, result)
		{
			error.should.equal("id parameter must be provided");
			done();		
		});
	});


	it("when an empty password parameter is passed to verifyPasswordIsValid", function(done)
	{
		should.throws( function() { usersProv.verifyPasswordIsValid(111); }, Error);
		done();
	});


	it("when an empty salt parameter is passed to createHashedPassword", function(done)
	{
		should.throws( function() { usersProv.createHashedPassword("asdfasd"); }, Error);
		done();
	});


	it("when valid parameters are passed to createHashedPassword", function(done)
	{
		usersProv.createHashedPassword("Ryan123!","asdfasdfasd").should.equal("bb415380f39d125a93935d233a675a878bd87da37f314fe92d1e45f984130ebc");
		usersProv.createHashedPassword("Ryan123!","asdfasdfasd").length.should.equal(64);

		done();
	});


	it("when valid parameters are passed to createRandomSalt", function(done)
	{
		usersProv.createRandomSalt().should.not.equal(null);
		done();
	});


	it("when the value generated by createRandomSalt is passed to createHashedPassword", function(done)
	{
		var  randomSalt = usersProv.createRandomSalt();
		usersProv.createHashedPassword("Ryan123!",randomSalt).length.should.equal(64);
		done();
	});



});

